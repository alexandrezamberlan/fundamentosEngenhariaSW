ENGENHARIA DE SOFTWARE: conjunto de fases: modelagem; projeto; implementação; teste; entrega
    - Modelar: esquematizar esboços (visuais e descritivos) de aspectos estruturais e funcionais do sistema
               levantar resquisitos (geralmente nesta fase que UML é utilizada)
    - Projetar: estender a modelagem, mas informando detalhes para a implementação, ou seja,
                modelos/esquemas/maquetes mais perto da realidade desejada
    - Implementar: operacionalizar com determinada tecnologia/material/produto as funcionalidades 
                 modeladas
    - Testar: procurar por falhas: erros de funcionamento; falta de qualidade no código (edentação ou 
              nomes ruins nas variáveis e nos métodos);
    - Entregar: ...

     Nas fases Modelagem e Projeto há LINGUAGENS gráficas/visuais para criar os esquemas/modelos/esboços
        - UML: Unified Modeling Language: liguagem visual para representar aspectos (DIAGRAMAS)
               estruturais e funcionais de um sistema em desenvolvimento.
            - Produz ARTEFATOS (diagramas) visuais com detalhes do sistema:
                - Aspectos estruturais: banco de dados; classes; arquitetura (como os componentes 
                  se relacionam)
                - Aspectos funcionais/comportamento: fluxo de atividades; fluxo de prioridade das
                  funcionalidades; diagrama de funcionalidades e responsabilidades
            - 14 diagramas ao todo: casos de uso; atividades; processo; ER; classes; sequência; arquitetura


LINGUAGEM DE MODELAGEM UNIFICADA (UML)
    - Ferramenta de modelagem visual orientada a objetos, ou seja, o próprio sistema e cada elemento que compõe o sistema é um objeto que possui ATRIBUTOS (aspectos estruturais) e MÉTODOS/OPERAÇÕES (aspectos funcionais/comportamentais) e vão desenhados como artefatos da UML.
    Diagramas:
        - Estruturais: modelar aspectos referente a atributos, objetos e classes.
            - Classe, Pacote, Entrega
        - Funcionais/Comportamentais: modelar aspectos referentes a operações ou métodos que o sistema ou os objetos podem ter.
            Atividades, Sequencia (diagrama de interação), Casos de Uso (mapeia todas as macro funcionalidades do sistema)
    ASTAH: ferramenta para diagramar UML
    
   
   CURIOSIDADES:
    IDE - Integrated Development Environment - Ambiente de Desenvolvimento Integrado (codifica, compila, executa, debuga e testa): CodeBlock, DevCPP, VisualStudio, Netbeans
        OBSERVAÇÃO: Uma boa IDE permite a inserção de APIs e de sistemas de controle de versão
    API - Application Programming Interface - Interface para Programar Aplicações (esta associado a um framework, logo a funcionalidades/serviços prontos): 
    
   Modelagem Estruturada: 
    - Da década de 80 e foi elaborada por Peter Chen.
    - Focada (INÍCIO) na construção do sistema a partir dos aspectos ESTRUTURAIS, principalmente, BANCO DE DADOS.
    - Diagramas de Entidade-Relacionamento (ER: banco de dados) e de Fluxo de Dados (DFD: funcionalidades)
    - Era muito usada com a METODOLOGIA CASCATA: só depois de fazer a modelagem, se fazia o projeto; só depois do projeto, se começava a implementação; só depois de terminar a implementação que o cliente recebi uma versão;
    
   Modelagem Orientada a Objetos (ENGENHARIA DE SOFTWARE ORIENTADA A OBJETOS)
    - Engenharia de software mais atual (iniciou nos anos 90) e foi criada por Booch, Rumbaugh, Jacobson.
    - Focada (INÍCIO) na construção do sistema a partir dos ASPECTOS FUNCIONAIS e com o uso da UML
    - Diagramas: Casos de Uso, Atividades, Interação (Sequência); Pacotes e de Entrega (deployment)
    - É muito utilizada com metodologias ÁGEIS (XP, FDD e SCRUM)
        - elas executam as fases da engenharia (sem ser em cascata). Ou seja, faz-se um pouco de modelagem, ou pouco de projeto, pouco de implementação (gerando protótipos) e entregas frequentes (quase que quinzenais) aos clientes. 
        - O QUE MUDA DRASTICAMENTE: é a presença do cliente na equipe do projeto e ENTREGAS FREQUENTES
